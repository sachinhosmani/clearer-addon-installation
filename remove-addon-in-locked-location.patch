# HG changeset patch
# User Sachin Hosmani <sachinhosmani2@gmail.com>
# Date 1378389531 -19800
#      Thu Sep 05 19:28:51 2013 +0530
# Node ID be99f4eeb2b813aa5892e2e87b2e11888db3b8c0
# Parent  399906087127f0533d6b654a1dbc47f36ab31080
Bug 640775 - Allow a form of uninstalling add-ons installed globally by third-party applications or system administrators

diff --git a/toolkit/mozapps/extensions/AddonManager.jsm b/toolkit/mozapps/extensions/AddonManager.jsm
--- a/toolkit/mozapps/extensions/AddonManager.jsm
+++ b/toolkit/mozapps/extensions/AddonManager.jsm
@@ -1872,16 +1872,49 @@
 
       noMoreObjects: function getAddonsWithOperationsByTypes_noMoreObjects(caller) {
         safeCall(aCallback, addons);
       }
     });
   },
 
   /**
+   * Asynchronously gets all add-ons that have been uninstalled but are still in
+   * the database because they are in locked install locations.
+   *
+   * @param aCallback
+   *        A callback to pass the array of AddonWrappers to.
+   */
+  getUninstalledAddons:
+  function AMI_getUninstalledAddons(aCallback) {
+    if (!gStarted)
+      throw Components.Exception("AddonManager is not initialized",
+                                 Cr.NS_ERROR_NOT_INITIALIZED);
+
+    if (typeof aCallback != "function")
+      throw Components.Exception("aCallback must be a function",
+                                 Cr.NS_ERROR_INVALID_ARG);
+
+    let addons = [];
+
+    new AsyncObjectCaller(this.providers, "getUninstalledAddons", {
+      nextObject: function getUninstalledAddons_nextObject(aCaller, aProvider) {
+        callProvider(aProvider, "getUninstalledAddons", null,
+                     function getUninstalledAddons_concatAddons(aProviderAddons) {
+          addons = addons.concat(aProviderAddons);
+          aCaller.callNext();
+        });
+      },
+
+      noMoreObjects: function getUninstalledAddons_noMoreObjects(caller) {
+        safeCall(aCallback, addons);
+      }
+    });
+  },
+  /**
    * Adds a new AddonManagerListener if the listener is not already registered.
    *
    * @param  aListener
    *         The listener to add
    */
   addManagerListener: function AMI_addManagerListener(aListener) {
     if (!aListener || typeof aListener != "object")
       throw Components.Exception("aListener must be an AddonManagerListener object",
@@ -2350,16 +2383,20 @@
     AddonManagerInternal.getAddonsByIDs(aIDs, aCallback);
   },
 
   getAddonsWithOperationsByTypes:
   function AM_getAddonsWithOperationsByTypes(aTypes, aCallback) {
     AddonManagerInternal.getAddonsWithOperationsByTypes(aTypes, aCallback);
   },
 
+  getUninstalledAddons: function AM_getUninstalledAddons(aCallback) {
+    AddonManagerInternal.getUninstalledAddons(aCallback);
+  },
+
   getAddonsByTypes: function AM_getAddonsByTypes(aTypes, aCallback) {
     AddonManagerInternal.getAddonsByTypes(aTypes, aCallback);
   },
 
   getAllAddons: function AM_getAllAddons(aCallback) {
     AddonManagerInternal.getAllAddons(aCallback);
   },
 
diff --git a/toolkit/mozapps/extensions/XPIProvider.jsm b/toolkit/mozapps/extensions/XPIProvider.jsm
--- a/toolkit/mozapps/extensions/XPIProvider.jsm
+++ b/toolkit/mozapps/extensions/XPIProvider.jsm
@@ -2038,16 +2038,36 @@
       };
 
       states.push(locationState);
     }, this);
     return states;
   },
 
   /**
+   * Compares two install locations by priority and returns:
+   * 1 if the 1st location is higher in priority
+   * -1 if the 2nd location is higher in priority
+   * 0 if both locations are of same priority
+   *
+   * @param aInstallLocationName1
+   *        Name of the 1st install location.
+   * @param aInstallLocationName2
+   *        Name of the 2nd install location.
+   */
+  compareInstallLocationsByPriority:
+  function XPI_compareInstallLocationsByPriority(aInstallLocationName1,
+                                                 aInstallLocationName2) {
+    let location1 = this.installLocationsByName[aInstallLocationName1];
+    let location2 = this.installLocationsByName[aInstallLocationName2];
+    let result = this.installLocations.indexOf(location1) - this.installLocations.indexOf(location2);
+    return (result === 0) ? result : (result / Math.abs(result));
+  },
+
+  /**
    * Check the staging directories of install locations for any add-ons to be
    * installed or add-ons to be uninstalled.
    *
    * @param  aManifests
    *         A dictionary to add detected install manifests to for the purpose
    *         of passing through updated compatibility information
    * @return true if an add-on was installed or uninstalled
    */
@@ -2986,16 +3006,20 @@
 
       // Check if the database knows about any add-ons in this install location.
       if (knownLocations.has(installLocation.name)) {
         knownLocations.delete(installLocation.name);
         let addons = XPIDatabase.getAddonsInLocation(installLocation.name);
         // Iterate through the add-ons installed the last time the application
         // ran
         addons.forEach(function(aOldAddon) {
+          if (aOldAddon.uninstalled) {
+            // Uninstalled add-ons must not be processed.
+            return;
+          }
           // If a version of this add-on has been installed in an higher
           // priority install location then count it as changed
           if (AddonManager.getStartupChanges(AddonManager.STARTUP_CHANGE_INSTALLED)
                           .indexOf(aOldAddon.id) != -1) {
             AddonManagerPrivate.addStartupChange(AddonManager.STARTUP_CHANGE_CHANGED,
                                                  aOldAddon.id);
           }
 
@@ -3448,16 +3472,59 @@
             !(aInstall.addon.inDatabase))
           results.push(createWrapper(aInstall.addon));
       });
       aCallback(results);
     });
   },
 
   /**
+   * Called to get add-ons that have been uninstalled but are still in the database
+   * because they are in locked install locations.
+   *
+   * @param aCallback
+   *        A callback to pass an array of AddonWrappers to.
+   */
+  getUninstalledAddons:
+  function XPI_getUninstalledAddons(aCallback) {
+    let self = this;
+    XPIDatabase.getUninstalledAddons(function getUninstalledAddons_getUninstalledAddons(aAddons) {
+      let uninstalled = {};
+      // There may be many add-ons with the same ID in different install locations.
+      // In such cases, we return only the add-on in the highest priority location.
+      for (let addon of aAddons) {
+        if (!uninstalled[addon.id] ||
+            self.compareInstallLocationsByPriority(uninstalled[addon.id].location,
+                                                   addon.location) === -1) {
+          uninstalled[addon.id] = addon;
+        }
+      }
+
+      let uninstalledIds = [];
+      for (let id in uninstalled) {
+        if (uninstalled.hasOwnProperty(id))
+          uninstalledIds.push(id);
+      }
+      // We exclude all add-ons that whose copies are already installed.
+      XPIDatabase.getVisibleAddonsForIDs(uninstalledIds,
+        function getUninstalledAddons_getVisibleAddonsForIDs(aAddons) {
+          for (let addon of aAddons)
+            delete uninstalled[addon.id];
+          let filtered = [];
+          for (let id in uninstalled) {
+            if (uninstalled.hasOwnProperty(id))
+              filtered.push(createWrapper(uninstalled[id]));
+          }
+          aCallback(filtered);
+        }
+      );
+    });
+  },
+
+  /**
    * Called to get the current AddonInstalls, optionally limiting to a list of
    * types.
    *
    * @param  aTypes
    *         An array of types or null to get all types
    * @param  aCallback
    *         A callback to pass the array of AddonInstalls to
    */
@@ -4108,43 +4175,50 @@
    *         The DBAddonInternal to uninstall
    * @throws if the addon cannot be uninstalled because it is in an install
    *         location that does not allow it
    */
   uninstallAddon: function XPI_uninstallAddon(aAddon) {
     if (!(aAddon.inDatabase))
       throw new Error("Can only uninstall installed addons.");
 
-    if (aAddon._installLocation.locked)
-      throw new Error("Cannot uninstall addons from locked install locations");
-
     if ("_hasResourceCache" in aAddon)
       aAddon._hasResourceCache = new Map();
 
     // Inactive add-ons don't require a restart to uninstall
     let requiresRestart = this.uninstallRequiresRestart(aAddon);
+    let lockedLocation = aAddon._installLocation.locked;
 
     if (requiresRestart) {
-      // We create an empty directory in the staging directory to indicate that
-      // an uninstall is necessary on next startup.
-      let stage = aAddon._installLocation.getStagingDir();
-      stage.append(aAddon.id);
-      if (!stage.exists())
-        stage.create(Ci.nsIFile.DIRECTORY_TYPE, FileUtils.PERMS_DIRECTORY);
+      if (!lockedLocation) {
+        // We create an empty directory in the staging directory to indicate that
+        // an uninstall is necessary on next startup.
+        let stage = aAddon._installLocation.getStagingDir();
+        stage.append(aAddon.id);
+        if (!stage.exists())
+          stage.create(Ci.nsIFile.DIRECTORY_TYPE, FileUtils.PERMS_DIRECTORY);
+      }
 
       XPIDatabase.setAddonProperties(aAddon, {
         pendingUninstall: true
       });
       Services.prefs.setBoolPref(PREF_PENDING_OPERATIONS, true);
     }
 
     // If the add-on is not visible then there is no need to notify listeners.
     if (!aAddon.visible)
       return;
 
+    if (lockedLocation) {
+      XPIDatabase.setAddonProperties(aAddon, {
+        visible: false,
+        uninstalled: true
+      });
+    }
+
     let wrapper = createWrapper(aAddon);
     AddonManagerPrivate.callAddonListeners("onUninstalling", wrapper,
                                            requiresRestart);
 
     // Reveal the highest priority add-on with the same ID
     function revealAddon(aAddon) {
       XPIDatabase.makeAddonVisible(aAddon);
 
@@ -4183,36 +4257,59 @@
         function checkInstallLocation_getAddonInLocation(aNewAddon) {
         if (aNewAddon)
           revealAddon(aNewAddon);
         else
           checkInstallLocation(aPos - 1);
       })
     }
 
+    // Marks all other add-ons of the same ID in locked locations as "uninstalled".
+    function uninstallOtherAddonCopies() {
+      XPIDatabase.getAllAddonsForID(aAddon.id, function (aAddons) {
+        for (let addon of aAddons) {
+          if (addon._key !== aAddon._key) {
+            LOG("Also marking uninstalled: " + addon._key);
+            XPIDatabase.setAddonProperties(addon, {
+              uninstalled: true
+            });
+          }
+        }
+      });
+    }
+
     if (!requiresRestart) {
       if (aAddon.bootstrap) {
         let file = aAddon._installLocation.getLocationForID(aAddon.id);
         if (aAddon.active) {
           this.callBootstrapMethod(aAddon.id, aAddon.version, aAddon.type, file,
                                    "shutdown",
                                    BOOTSTRAP_REASONS.ADDON_UNINSTALL);
         }
 
         this.callBootstrapMethod(aAddon.id, aAddon.version, aAddon.type, file,
                                  "uninstall",
                                  BOOTSTRAP_REASONS.ADDON_UNINSTALL);
         this.unloadBootstrapScope(aAddon.id);
         flushStartupCache();
       }
-      aAddon._installLocation.uninstallAddon(aAddon.id);
-      XPIDatabase.removeAddonMetadata(aAddon);
+      if (!lockedLocation) {
+        aAddon._installLocation.uninstallAddon(aAddon.id);
+        XPIDatabase.removeAddonMetadata(aAddon);
+      }
       AddonManagerPrivate.callAddonListeners("onUninstalled", wrapper);
-
-      checkInstallLocation(this.installLocations.length - 1);
+      // We don't reveal other copies of an add-on getting uninstalled from a
+      // locked location.
+      if (!lockedLocation)
+        checkInstallLocation(this.installLocations.length - 1);
+    }
+    if (lockedLocation) {
+      // We don't want other copies of this add-on in other locked locations
+      // surfacing now that this add-on is removed.
+      uninstallOtherAddonCopies();
     }
 
     // Notify any other providers that a new theme has been enabled
     if (aAddon.type == "theme" && aAddon.active)
       AddonManagerPrivate.notifyAddonChanged(null, aAddon.type, requiresRestart);
   },
 
   /**
@@ -4220,34 +4317,99 @@
    *
    * @param  aAddon
    *         The DBAddonInternal to cancel uninstall for
    */
   cancelUninstallAddon: function XPI_cancelUninstallAddon(aAddon) {
     if (!(aAddon.inDatabase))
       throw new Error("Can only cancel uninstall for installed addons.");
 
-    cleanStagingDir(aAddon._installLocation.getStagingDir(), [aAddon.id]);
+    let lockedLocation = aAddon._installLocation.locked;
+    if (!lockedLocation)
+      cleanStagingDir(aAddon._installLocation.getStagingDir(), [aAddon.id]);
 
     XPIDatabase.setAddonProperties(aAddon, {
       pendingUninstall: false
     });
 
+    if (aAddon.uninstalled) {
+      // This was a speical type of uninstallation because the add-on is in a 
+      // locked location.
+      XPIDatabase.setAddonProperties(aAddon, {
+        visible: true,
+        uninstalled: false
+      });
+    }
     if (!aAddon.visible)
       return;
 
+    // This method isn't called for restartless add-ons. So we must set
+    // PREF_PENDING_OPERATIONS as true.
     Services.prefs.setBoolPref(PREF_PENDING_OPERATIONS, true);
 
+    let wrapper = createWrapper(aAddon);
     // TODO hide hidden add-ons (bug 557710)
-    let wrapper = createWrapper(aAddon);
     AddonManagerPrivate.callAddonListeners("onOperationCancelled", wrapper);
 
     // Notify any other providers that this theme is now enabled again.
     if (aAddon.type == "theme" && aAddon.active)
       AddonManagerPrivate.notifyAddonChanged(aAddon.id, aAddon.type, false);
+  },
+
+  /**
+   * Reinstalls an uninstalled add-on that is still in database because it
+   * is in a locked location.
+   *
+   * @param  aAddon
+   *         The DBAddonInternal to resinstall.
+   */
+  reinstallAddon: function XPI_reinstallAddon(aAddon) {
+    if (!(aAddon.inDatabase))
+      throw new Error("Can only reinstall add-ons in the database.");
+
+    if (!aAddon.uninstalled)
+      throw new Error("Can't reinstall an add-on that hasn't been uninstalled.");
+
+    let requiresRestart = XPIProvider.enableRequiresRestart(aAddon);
+    if (aAddon.pendingUninstall) {
+        XPIDatabase.setAddonProperties(aAddon, {
+        pendingUninstall: false
+      });
+    }
+    if (requiresRestart) {
+      // The add-ons list will have to be rewritten during shutdown.
+      Services.prefs.setBoolPref(PREF_PENDING_OPERATIONS, true);
+    }
+    AddonManagerPrivate.callAddonListeners("onInstalling", this,
+                                           requiresRestart);
+    XPIDatabase.setAddonProperties(aAddon, {
+      uninstalled: false
+    });
+    XPIDatabase.makeAddonVisible(aAddon);
+    XPIDatabase.setAddonProperties(aAddon, {
+      userDisabled: false
+    });
+
+    let wrapper = createWrapper(aAddon);
+    if (!requiresRestart) {
+      if (aAddon.bootstrap) {
+        XPIDatabase.updateAddonActive(aAddon, true);
+        let file = aAddon._installLocation.getLocationForID(aAddon.id);
+        XPIProvider.callBootstrapMethod(aAddon.id, aAddon.version, aAddon.type, file,
+                                        "install", BOOTSTRAP_REASONS.ADDON_INSTALL);
+        XPIProvider.callBootstrapMethod(aAddon.id, aAddon.version, aAddon.type, file,
+                                        "startup", BOOTSTRAP_REASONS.ADDON_INSTALL);
+      }
+      AddonManagerPrivate.callAddonListeners("onInstalled", wrapper,
+                                             requiresRestart);
+    }
+    AddonManagerPrivate.callInstallListeners("onExternalInstall", null, wrapper,
+                                             null, requiresRestart);
+    AddonManagerPrivate.callAddonListeners("onOperationCancelled", wrapper);
+    flushStartupCache();
   }
 };
 
 
 function getHashStringForCrypto(aCrypto) {
   // return the two-digit hexadecimal code for a byte
   function toHexString(charCode)
     ("0" + charCode.toString(16)).slice(-2);
@@ -5717,16 +5879,18 @@
 function AddonInternal() {
 }
 
 AddonInternal.prototype = {
   _selectedLocale: null,
   active: false,
   visible: false,
   userDisabled: false,
+  // If this add-on has been uninstalled but is in a locked location.
+  uninstalled: false,
   appDisabled: false,
   softDisabled: false,
   sourceURI: null,
   releaseNotesURI: null,
   foreignInstall: false,
 
   get selectedLocale() {
     if (this._selectedLocale)
@@ -6261,41 +6425,49 @@
 
     if (!aAddon.appDisabled) {
       if (this.userDisabled)
         permissions |= AddonManager.PERM_CAN_ENABLE;
       else if (aAddon.type != "theme")
         permissions |= AddonManager.PERM_CAN_DISABLE;
     }
 
-    // Add-ons that are in locked install locations, or are pending uninstall
-    // cannot be upgraded or uninstalled
-    if (!aAddon._installLocation.locked && !aAddon.pendingUninstall) {
+    // Add-ons pending uninstall cannot be upgraded or uninstalled
+    if (!aAddon.pendingUninstall) {
       // Add-ons that are installed by a file link cannot be upgraded
       if (!aAddon._installLocation.isLinkedAddon(aAddon.id))
         permissions |= AddonManager.PERM_CAN_UPGRADE;
 
       permissions |= AddonManager.PERM_CAN_UNINSTALL;
     }
     return permissions;
   });
 
   this.__defineGetter__("isActive", function AddonWrapper_isActiveGetter() {
     if (Services.appinfo.inSafeMode)
       return false;
     return aAddon.active;
   });
 
+  this.__defineGetter__("uninstalled", function AddonWrapper_uninstalledGetter() {
+    return aAddon.uninstalled;
+  });
+
   this.__defineGetter__("userDisabled", function AddonWrapper_userDisabledGetter() {
     return aAddon.softDisabled || aAddon.userDisabled;
   });
+
   this.__defineSetter__("userDisabled", function AddonWrapper_userDisabledSetter(val) {
     if (val == this.userDisabled)
       return val;
 
+    if (aAddon.uninstalled) {
+      LOG("Can't change userDisabled of an uninstalled add-on.");
+      return this.userDisabled;
+    }
     if (aAddon.inDatabase) {
       if (aAddon.type == "theme" && val) {
         if (aAddon.internalName == XPIProvider.defaultSkin)
           throw new Error("Cannot disable the default theme");
         XPIProvider.enableDefaultTheme();
       }
       else {
         XPIProvider.updateAddonDisabledState(aAddon, val);
@@ -6342,16 +6514,24 @@
   this.uninstall = function AddonWrapper_uninstall() {
     if (!(aAddon.inDatabase))
       throw new Error("Cannot uninstall an add-on that isn't installed");
     if (aAddon.pendingUninstall)
       throw new Error("Add-on is already marked to be uninstalled");
     XPIProvider.uninstallAddon(aAddon);
   };
 
+  this.reinstall = function AddonWrapper_reinstall() {
+    if (!aAddon.inDatabase)
+      throw new Error("Cannot install an add-on that isn't in the database.");
+    if (!aAddon.uninstalled)
+      throw new Error("Cannot install an add-on that isn't uninstalled.");
+    XPIProvider.reinstallAddon(aAddon);
+  };
+
   this.cancelUninstall = function AddonWrapper_cancelUninstall() {
     if (!(aAddon.inDatabase))
       throw new Error("Cannot cancel uninstall for an add-on that isn't installed");
     if (!aAddon.pendingUninstall)
       throw new Error("Add-on is not marked to be uninstalled");
     XPIProvider.cancelUninstallAddon(aAddon);
   };
 
diff --git a/toolkit/mozapps/extensions/XPIProviderUtils.js b/toolkit/mozapps/extensions/XPIProviderUtils.js
--- a/toolkit/mozapps/extensions/XPIProviderUtils.js
+++ b/toolkit/mozapps/extensions/XPIProviderUtils.js
@@ -83,17 +83,17 @@
 const PROP_LOCALE_SINGLE = ["name", "description", "creator", "homepageURL"];
 const PROP_LOCALE_MULTI  = ["developers", "translators", "contributors"];
 const PROP_TARGETAPP     = ["id", "minVersion", "maxVersion"];
 
 // Properties to save in JSON file
 const PROP_JSON_FIELDS = ["id", "syncGUID", "location", "version", "type",
                           "internalName", "updateURL", "updateKey", "optionsURL",
                           "optionsType", "aboutURL", "iconURL", "icon64URL",
-                          "defaultLocale", "visible", "active", "userDisabled",
+                          "defaultLocale", "visible", "active", "userDisabled", "uninstalled",
                           "appDisabled", "pendingUninstall", "descriptor", "installDate",
                           "updateDate", "applyBackgroundUpdates", "bootstrap",
                           "skinnable", "size", "sourceURI", "releaseNotesURI",
                           "softDisabled", "foreignInstall", "hasBinaryComponents",
                           "strictCompatibility", "locales", "targetApplications",
                           "targetPlatforms"];
 
 // Time to wait before async save of XPI JSON database, in milliseconds
@@ -1103,31 +1103,67 @@
    *         A callback to pass the DBAddonInternal to
    */
   getVisibleAddonForID: function XPIDB_getVisibleAddonForID(aId, aCallback) {
     this.getAddon(aAddon => ((aAddon.id == aId) && aAddon.visible),
                   aCallback);
   },
 
   /**
+   * Asynchronously gets the add-ons with the specified IDs that are visible.
+   *
+   * @param  aIds
+   *         The IDs of the add-ons to retrieve
+   * @param  aCallback
+   *         A callback to pass the DBAddonInternal to
+   */
+  getVisibleAddonsForIDs: function XPIDB_getVisibleAddonsForIDs(aIds, aCallback) {
+    this.getAddonList(aAddon => ((aIds.indexOf(aAddon.id) !== -1) && aAddon.visible),
+                      aCallback);
+  },
+
+  /**
    * Asynchronously gets the visible add-ons, optionally restricting by type.
    *
    * @param  aTypes
    *         An array of types to include or null to include all types
    * @param  aCallback
    *         A callback to pass the array of DBAddonInternals to
    */
   getVisibleAddons: function XPIDB_getVisibleAddons(aTypes, aCallback) {
     this.getAddonList(aAddon => (aAddon.visible &&
                                  (!aTypes || (aTypes.length == 0) ||
                                   (aTypes.indexOf(aAddon.type) > -1))),
                       aCallback);
   },
 
   /**
+   * Asynchronously gets all add-ons for a given ID.
+   *
+   * @param  aId
+   *         The ID for which add-ons must be returned.
+   * @param  aCallback
+   *         A callback to pass the array of DBAddonInternals to
+   */
+  getAllAddonsForID: function XPIDB_getallAddonsForID(aId, aCallback) {
+    this.getAddonList(aAddon => (aAddon.id === aId), aCallback);
+  },
+
+  /**
+   * Asynchronously gets uninstalled add-ons that are still in the database
+   * because they are in locked locations.
+   *
+   * @param  aCallback
+   *         A callback to pass the array of AddonWrappers to
+   */
+  getUninstalledAddons: function XPIDB_getUninstalledAddons(aCallback) {
+    this.getAddonList(aAddon => (aAddon.uninstalled), aCallback);
+  },
+
+  /**
    * Synchronously gets all add-ons of a particular type.
    *
    * @param  aType
    *         The type of add-on to retrieve
    * @return an array of DBAddonInternals
    */
   getAddonsByType: function XPIDB_getAddonsByType(aType) {
     if (!this.addonDB) {
@@ -1280,16 +1316,22 @@
    * instances with the same ID as not visible.
    *
    * @param  aAddon
    *         The DBAddonInternal to make visible
    * @param  callback
    *         A callback to pass the DBAddonInternal to
    */
   makeAddonVisible: function XPIDB_makeAddonVisible(aAddon) {
+    if (aAddon.uninstalled) {
+      // Uninstalled add-ons which are still in the database have their
+      // visible property set to false. Startup code might try to make such an
+      // add-on visible which we must prevent.
+      return;
+    }
     LOG("Make addon " + aAddon._key + " visible");
     for (let [, otherAddon] of this.addonDB) {
       if ((otherAddon.id == aAddon.id) && (otherAddon._key != aAddon._key)) {
         LOG("Hide addon " + otherAddon._key);
         otherAddon.visible = false;
       }
     }
     aAddon.visible = true;
