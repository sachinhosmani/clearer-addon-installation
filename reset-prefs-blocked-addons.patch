# HG changeset patch
# Parent 287032af05f7465b51994bb9ce576eb99448dde1
Bug 802434 - Support resetting preferences when disabling blocklisted add-ons

diff --git a/toolkit/mozapps/extensions/nsBlocklistService.js b/toolkit/mozapps/extensions/nsBlocklistService.js
--- a/toolkit/mozapps/extensions/nsBlocklistService.js
+++ b/toolkit/mozapps/extensions/nsBlocklistService.js
@@ -366,16 +366,27 @@
     for (let currentblItem of blItem.versions) {
       if (currentblItem.includesItem(version, appVersion, toolkitVersion))
         return currentblItem.severity >= gBlocklistLevel ? Ci.nsIBlocklistService.STATE_BLOCKED :
                                                        Ci.nsIBlocklistService.STATE_SOFTBLOCKED;
     }
     return Ci.nsIBlocklistService.STATE_NOT_BLOCKED;
   },
 
+  /**
+   * Returns the set of prefs of the add-on stored in the blocklist file
+   * (probably to revert them on disabling).
+   * @param id
+   *        ID of the add-on.
+   */
+  _getAddonPrefs: function Blocklist_getAddonPrefs(id) {
+    let entry = this._findMatchingAddonEntry(this._addonEntries, id);
+    return entry.prefs.slice(0);
+  },
+
   _findMatchingAddonEntry: function Blocklist_findMatchingAddonEntry(aAddonEntries,
                                                                      aId) {
     for (let entry of aAddonEntries) {
       if (entry.id instanceof RegExp) {
         if (entry.id.test(aId))
           return entry;
       } else if (entry.id == aId) {
         return entry;
@@ -597,16 +608,20 @@
   },
 
   /**
 #    The blocklist XML file looks something like this:
 #
 #    <blocklist xmlns="http://www.mozilla.org/2006/addons-blocklist">
 #      <emItems>
 #        <emItem id="item_1@domain" blockID="i1">
+#          <prefs>
+#            <pref>accessibility.accesskeycausesactivation</pref>
+#            <pref>accessibility.blockautorefresh</pref>
+#          </prefs>
 #          <versionRange minVersion="1.0" maxVersion="2.0.*">
 #            <targetApplication id="{ec8030f7-c20a-464f-9b0e-13a3a9e97384}">
 #              <versionRange minVersion="1.5" maxVersion="1.5.*"/>
 #              <versionRange minVersion="1.7" maxVersion="1.7.*"/>
 #            </targetApplication>
 #            <targetApplication id="toolkit@mozilla.org">
 #              <versionRange minVersion="1.9" maxVersion="1.9.*"/>
 #            </targetApplication>
@@ -716,33 +731,43 @@
 
   _handleEmItemNode: function Blocklist_handleEmItemNode(blocklistElement, result) {
     if (!matchesOSABI(blocklistElement))
       return;
 
     let blockEntry = {
       id: null,
       versions: [],
+      prefs: [],
       blockID: null
     };
 
-    var versionNodes = blocklistElement.childNodes;
+    var childNodes = blocklistElement.childNodes;
     var id = blocklistElement.getAttribute("id");
     // Add-on IDs cannot contain '/', so an ID starting with '/' must be a regex
     if (id.startsWith("/"))
       id = parseRegExp(id);
     blockEntry.id = id;
 
-    for (var x = 0; x < versionNodes.length; ++x) {
-      var versionRangeElement = versionNodes.item(x);
-      if (!(versionRangeElement instanceof Ci.nsIDOMElement) ||
-          versionRangeElement.localName != "versionRange")
+    for (let x = 0; x < childNodes.length; x++) {
+      var childElement = childNodes.item(x);
+      if (!(childElement instanceof Ci.nsIDOMElement))
         continue;
-
-      blockEntry.versions.push(new BlocklistItemData(versionRangeElement));
+      if (childElement.localName === "prefs") {
+        let prefElements = childElement.childNodes;
+        for (let i = 0; i < prefElements.length; i++) {
+          let prefElement = prefElements.item(i);
+          if (!(prefElement instanceof Ci.nsIDOMElement) ||
+              prefElement.localName !== "pref")
+            continue;
+          blockEntry.prefs.push(prefElement.textContent);
+        }
+      }
+      else if (childElement.localName === "versionRange")
+        blockEntry.versions.push(new BlocklistItemData(childElement));
     }
     // if only the extension ID is specified block all versions of the
     // extension for the current application.
     if (blockEntry.versions.length == 0)
       blockEntry.versions.push(new BlocklistItemData(null));
 
     blockEntry.blockID = blocklistElement.getAttribute("blockID");
 
@@ -886,34 +911,48 @@
           return this._createBlocklistURL(blockEntry.blockID);
       }
     }
   },
 
   _blocklistUpdated: function Blocklist_blocklistUpdated(oldAddonEntries, oldPluginEntries) {
     var addonList = [];
 
+    // A helper function that reverts the prefs passed to default values.
+    function resetPrefs(prefs) {
+      for (let i = 0; i < prefs.length; i++) {
+        let pref = prefs[i];
+        let branch = gPref.getBranch(pref);
+        branch.clearUserPref("");
+      }
+    }
     var self = this;
-    const types = ["extension", "theme", "locale", "dictionary", "service"]
+    const types = ["extension", "theme", "locale", "dictionary", "service"];
     AddonManager.getAddonsByTypes(types, function blocklistUpdated_getAddonsByTypes(addons) {
 
       for (let addon of addons) {
         let oldState = Ci.nsIBlocklistService.STATE_NOTBLOCKED;
         if (oldAddonEntries)
           oldState = self._getAddonBlocklistState(addon.id, addon.version,
                                                   oldAddonEntries);
         let state = self.getAddonBlocklistState(addon.id, addon.version);
 
         LOG("Blocklist state for " + addon.id + " changed from " +
             oldState + " to " + state);
 
         // We don't want to re-warn about add-ons
         if (state == oldState)
           continue;
 
+        if (state === Ci.nsIBlocklistService.STATE_BLOCKED) {
+          // It's a hard block. We must reset certain preferences.
+          let prefs = self._getAddonPrefs(addon.id);
+          resetPrefs(prefs);
+         }
+
         // Ensure that softDisabled is false if the add-on is not soft blocked
         if (state != Ci.nsIBlocklistService.STATE_SOFTBLOCKED)
           addon.softDisabled = false;
 
         // Don't warn about add-ons becoming unblocked.
         if (state == Ci.nsIBlocklistService.STATE_NOT_BLOCKED)
           continue;
 
@@ -1011,18 +1050,23 @@
       */
       let applyBlocklistChanges = function blocklistUpdated_applyBlocklistChanges() {
         for (let addon of addonList) {
           if (!addon.disable)
             continue;
 
           if (addon.item instanceof Ci.nsIPluginTag)
             addon.item.enabledState = Ci.nsIPluginTag.STATE_DISABLED;
-          else
+          else {
+            // This add-on is softblocked.
             addon.item.softDisabled = true;
+            // We must revert certain prefs.
+            let prefs = self._getAddonPrefs(addon.item.id);
+            resetPrefs(prefs);
+          }
         }
 
         if (args.restart)
           restartApp();
 
         Services.obs.notifyObservers(self, "blocklist-updated", "");
         Services.obs.removeObserver(applyBlocklistChanges, "addon-blocklist-closed");
       }
