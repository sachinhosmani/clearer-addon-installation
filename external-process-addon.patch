# HG changeset patch
# User Sachin Hosmani <sachinhosmani2@gmail.com>
# Date 1372013209 -19800
#      Mon Jun 24 00:16:49 2013 +0530
# Node ID d089720b883130675d1000e62375e3eba486bf4f
# Parent  399906087127f0533d6b654a1dbc47f36ab31080
Bug 879480 - Allow external processes to request add-on installs / uninstalls

diff --git a/browser/components/nsBrowserContentHandler.js b/browser/components/nsBrowserContentHandler.js
--- a/browser/components/nsBrowserContentHandler.js
+++ b/browser/components/nsBrowserContentHandler.js
@@ -1,14 +1,15 @@
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 Components.utils.import("resource://gre/modules/XPCOMUtils.jsm");
 Components.utils.import("resource://gre/modules/Services.jsm");
+Components.utils.import("resource://gre/modules/AddonManager.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this, "PrivateBrowsingUtils",
                                   "resource://gre/modules/PrivateBrowsingUtils.jsm");
 XPCOMUtils.defineLazyModuleGetter(this, "RecentWindow",
                                   "resource:///modules/RecentWindow.jsm");
 
 const nsISupports            = Components.interfaces.nsISupports;
 
@@ -516,27 +517,63 @@
         cmdLine.removeArguments(i, i);
         cmdLine.preventDefault = true;
 
         searchParam = param.substr(2);
         doSearch(searchParam, cmdLine);
       }
     }
 #endif
+
+    try {
+      let arg = cmdLine.handleFlagWithParam("install-global-addon", false);
+      if (arg) {
+        // Try to get the most recent window
+        let win = RecentWindow.getMostRecentBrowserWindow();
+        if (win) {
+          let file = cmdLine.resolveFile(arg);
+          if (file && file.exists()) {
+            // Ask AddonManager to add the add-on situated at that file to the
+            // database.
+            AddonManager.addInstalledAddon(file, function(aAddon){
+              if (aAddon) {
+                // An add-on object is returned only if the add-on exists and is
+                // visible.
+              }
+            });
+          }
+          // Prevent the deault action of opening a new window
+          cmdLine.preventDefault = true;
+        } else {
+          // The flag install-global-addon is of use only if an instance of the
+          // app is open. Otherwise, a fresh start will anyway detect add-on
+          // installation.
+          dump("No existing instance of app found. This is a fresh startup.");
+          return;
+        }
+      }
+    }
+    catch (e) {
+      Components.utils.reportError("Error while processing -install-global-addon");
+    }
   },
 
   helpInfo : "  -browser           Open a browser window.\n" +
              "  -new-window  <url> Open <url> in a new window.\n" +
              "  -new-tab     <url> Open <url> in a new tab.\n" +
 #ifdef XP_WIN
              "  -preferences       Open Options dialog.\n" +
 #else
              "  -preferences       Open Preferences dialog.\n" +
 #endif
-             "  -search     <term> Search <term> with your default search engine.\n",
+             "  -search     <term> Search <term> with your default search engine.\n" +
+             "  -install-global-addon <path>\n" +
+             "                     Installs the add-on that is situated in the path.\n" +
+             "  -uninstall-global-addon <path>\n" +
+             "                     Uninstalls the add-on that was situated in the path.\n",
 
   /* nsIBrowserHandler */
 
   get defaultArgs() {
     var prefb = Components.classes["@mozilla.org/preferences-service;1"]
                           .getService(nsIPrefBranch);
 
     if (!gFirstWindow) {
diff --git a/toolkit/mozapps/extensions/AddonManager.jsm b/toolkit/mozapps/extensions/AddonManager.jsm
--- a/toolkit/mozapps/extensions/AddonManager.jsm
+++ b/toolkit/mozapps/extensions/AddonManager.jsm
@@ -1399,16 +1399,44 @@
 
       noMoreObjects: function getInstallForFile_noMoreObjects(aCaller) {
         safeCall(aCallback, null);
       }
     });
   },
 
   /**
+   * Called if an add-on has been installed (via registry or copying) and needs
+   * to be added to the database. This is for add-ons that are installed
+   * while the app is running.
+   *
+   * @param  aFile
+   *         An nsIFile corresponding to the add-on that is installed
+   * @param  aCallback
+   *         The callback that will passed the add-on
+   */
+  addInstalledAddon: function AM_addInstalledAddon(aFile, aCallback) {
+    new AsyncObjectCaller(this.providers, "addInstalledAddon", {
+      nextObject: function addInstalledAddon_nextObject(aCaller, aProvider) {
+        callProvider(aProvider, "addInstalledAddon", null, aFile,
+                     function addInstalledAddon_safeCall(aID) {
+          if (aID)
+            safeCall(aCallback, aID);
+          else
+            aCaller.callNext();
+        });
+      },
+
+      noMoreObjects: function addInstalledAddon_noMoreObjects(aCaller) {
+        safeCall(aCallback, null);
+      }
+    });
+  },
+
+  /**
    * Asynchronously gets all current AddonInstalls optionally limiting to a list
    * of types.
    *
    * @param  aTypes
    *         An optional array of types to retrieve. Each type is a string name
    * @param  aCallback
    *         A callback which will be passed an array of AddonInstalls
    * @throws If the aCallback argument is not specified
@@ -2321,16 +2349,28 @@
                                           aName, aIcons, aVersion, aLoadGroup);
   },
 
   getInstallForFile: function AM_getInstallForFile(aFile, aCallback, aMimetype) {
     AddonManagerInternal.getInstallForFile(aFile, aCallback, aMimetype);
   },
 
   /**
+   * Calls AddonManagerInternal's addInstalledAddon
+   *
+   * @param  aFile
+   *         An nsIFile corresponding to the add-on that is installed
+   *         aCallback
+   *         A callback that will be passed the add-on
+   */
+  addInstalledAddon: function AM_addinstalledAddon(aFile, aCallback) {
+    AddonManagerInternal.addInstalledAddon(aFile, aCallback);
+  },
+
+  /**
    * Gets an array of add-on IDs that changed during the most recent startup.
    *
    * @param  aType
    *         The type of startup change to get
    * @return An array of add-on IDs
    */
   getStartupChanges: function AM_getStartupChanges(aType) {
     if (!(aType in AddonManagerInternal.startupChanges))
diff --git a/toolkit/mozapps/extensions/XPIProvider.jsm b/toolkit/mozapps/extensions/XPIProvider.jsm
--- a/toolkit/mozapps/extensions/XPIProvider.jsm
+++ b/toolkit/mozapps/extensions/XPIProvider.jsm
@@ -3368,16 +3368,299 @@
       if (aInstall)
         aCallback(aInstall.wrapper);
       else
         aCallback(null);
     }, aFile);
   },
 
   /**
+   * Called to add an installed add-on to the database and start it if it is
+   * restartless
+   *
+   * @param aFile
+   *        An nsIFile corresponding to the add-on that is installed
+   * @param aCallback
+   *        A callback that will be passed the add-on
+   */
+  addInstalledAddon: function XPI_addInstalledAddon(aFile, aCallback) {
+
+    /**
+     * A helper function that adds an add-on to the database.
+     * @param aInstallLocation
+     *        The install location where the add-on is present.
+     * @param aId
+     *        The ID of the add-on to be installed.
+     * @param aShadowed
+     *        A boolean that tells if this add-on is shadowed by other an
+     *        other add-on of the same ID in a higher priority location.
+     * @param aExistingAddon
+     *        An active DBAddonInternal add-on whose place the new add-on must take.
+     * @param aAddonState
+     *        The present add-on state corresponding to this add-on.
+     * @return true if the add-on is a restartless one.
+     */
+    function addMetaData(aInstallLocation, aId, aShadowed, aExistingAddon, aAddonState) {
+      LOG("New add-on " + aId + "installed in " + aInstallLocation.name);
+
+      let newAddon;
+      try {
+        let file = aInstallLocation.getLocationForID(aId);
+        newAddon = loadManifestFromFile(file);
+        if (newAddon.id !== aId)
+          throw new Error("Incorrect ID in manifest");
+      } catch (e) {
+        WARN("Add-on is invalid", e);
+
+        // Remove the invalid add-on from the install location if the install
+        // location isn't locked, no restart will be necessary
+        if (!aInstallLocation.locked)
+          aInstallLocation.uninstallAddon(aId);
+        else
+          WARN("Could not uninstall invalid item from locked install location");
+        throw new Error("Add-on in invalid");
+        return;
+      }
+      // Update the AddonInternal properties.
+      newAddon._installLocation = aInstallLocation;
+      newAddon.visible = !aShadowed;
+      newAddon.installDate = aAddonState.mtime;
+      newAddon.updateDate = aAddonState.mtime;
+      newAddon.foreignInstall = true;
+
+      // If the add-on is a foreign install and is in a scope where add-ons
+      // that were dropped in should default to disabled then disable it
+      let disablingScopes = Prefs.getIntPref(PREF_EM_AUTO_DISABLED_SCOPES, 0);
+      if (!aShadowed && (aInstallLocation.scope & disablingScopes))
+        newAddon.userDisabled = true;
+
+      newAddon.active = (newAddon.visible && !isAddonDisabled(newAddon));
+      let wrapper = createWrapper(newAddon);
+
+      if (newAddon.visible) {
+        // This should take care of updating the UI with the new add-on.
+        AddonManagerPrivate.callInstallListeners("onExternalInstall", null,
+                                                 wrapper,
+                                                 createWrapper(aExistingAddon),
+                                                 requiresRestart);
+      }
+      AddonManagerPrivate.callAddonListeners("onInstalling", wrapper, requiresRestart);
+
+      let requiresRestart = XPIProvider.installRequiresRestart(newAddon);
+      let newDBAddon = XPIDatabase.addAddonMetadata(newAddon, aAddonState.descriptor);
+      wrapper = createWrapper(newDBAddon);
+
+      if (newDBAddon.visible) {
+        // Note if any visible add-on is not in the application install location
+        if (newDBAddon._installLocation.name != KEY_APP_GLOBAL)
+          XPIProvider.allAppGlobal = false;
+
+        let extraParams = {};
+        let installReason;
+
+        // If the add-on will replace a bootstrapped add-on we must unload the
+        // old add-on.
+        if (newDBAddon.id in XPIProvider.bootstrappedAddons) {
+          let oldBootstrap = XPIProvider.bootstrappedAddons[newDBAddon.id];
+          extraParams.oldVersion = oldBootstrap.version;
+
+          installReason = Services.vc.compare(oldBootstrap.version, newDBAddon.version) < 0 ?
+                          BOOTSTRAP_REASONS.ADDON_UPGRADE :
+                          BOOTSTRAP_REASONS.ADDON_DOWNGRADE;
+
+          let oldAddonFile = Cc["@mozilla.org/file/local;1"].
+                             createInstance(Ci.nsIFile);
+          oldAddonFile.persistentDescriptor = oldBootstrap.descriptor;
+
+          XPIProvider.callBootstrapMethod(newDBAddon.id, oldBootstrap.version,
+                                          oldBootstrap.type, oldAddonFile, "shutdown",
+                                          installReason, { newVersion: newDBAddon.version });
+          XPIProvider.callBootstrapMethod(newDBAddon.id, oldBootstrap.version,
+                                          oldBootstrap.type, oldAddonFile, "uninstall",
+                                          installReason, { newVersion: newDBAddon.version });
+          XPIProvider.unloadBootstrapScope(newDBAddon.id);
+        }
+
+        if (!requiresRestart)
+          flushStartupCache();
+        else
+          return true;
+
+        if (newDBAddon.bootstrap) {
+          // Visible bootstrapped add-ons need to have their install method called
+          let file = Cc["@mozilla.org/file/local;1"].createInstance(Ci.nsIFile);
+          file.persistentDescriptor = aAddonState.descriptor;
+          XPIProvider.callBootstrapMethod(newDBAddon.id, newDBAddon.version,
+                                          newDBAddon.type, file, "install",
+                                          installReason, extraParams);
+
+          AddonManagerPrivate.callAddonListeners("onInstalled", wrapper, wrapper);
+          if (!newDBAddon.active)
+            XPIProvider.unloadBootstrapScope(newDBAddon.id);
+          else
+            XPIProvider.callBootstrapMethod(newDBAddon.id, newDBAddon.version,
+                                            newDBAddon.type, file, "startup",
+                                            installReason, extraParams);
+        }
+        return false;
+      }
+    }
+
+    LOG("XPI_addInstalledAddon");
+    if (!aFile.exists()) {
+      // File doesn't exist
+      ERROR("File doesn't exist.");
+      aCallback(null);
+      return;
+    }
+
+    let parent = aFile.parent;
+    let id, locationKey;
+    // We iterate through all install locations and try to find the add-on that
+    // is to be installed.
+    for (locationKey in this.installLocationsByName) {
+      if (locationKey === KEY_PROFILEDIR)
+        continue;
+      let installLocation = this.installLocationsByName[locationKey];
+      // Try to load just this add-on into the location's map.
+      if (installLocation instanceof DirectoryInstallLocation) {
+        if (installLocation.directory.equals(parent))
+          id = installLocation.lookUpAddon(aFile.leafName);
+      } else {
+        id = installLocation.lookUpAddon(aFile);
+      }
+      if (id) {
+        // We have found the specified file in one of the install locations.
+        break;
+      }
+    }
+
+    if (!id) {
+      LOG("Add-on file was not found in any install location.\n");
+      aCallback(null);
+      return;
+    }
+
+    LOG("Checking for changes in add-ons with id: " + id);
+
+    // Telemetry probe added around getInstallLocationStates() to check perf
+    let telemetryCaptureTime = new Date();
+    let states = this.getInstallLocationStates();
+    let telemetry = Services.telemetry;
+    telemetry.getHistogramById("CHECK_ADDONS_MODIFIED_MS").add(new Date() -
+                                                               telemetryCaptureTime);
+
+    // If the state has changed from the install cache then we must update
+    // the database. This will save reading from the database if there hasn't
+    // been a change in state.
+    let cache = Prefs.getCharPref(PREF_INSTALL_CACHE, null);
+    let updateDatabase = cache != JSON.stringify(states);
+
+    let restartLess;
+    if (!updateDatabase) {
+      aCallback(null);
+      return;
+    }
+    let shadowed = false;
+    try {
+      let knownLocations = XPIDatabase.getInstallLocations();
+      if (knownLocations.has(locationKey)) {
+        let oldAddons = XPIDatabase.getAddonsInLocation(locationKey);
+        for (let addon of oldAddons) {
+          if (addon.id === id) {
+            LOG("Add-on already exists in database.");
+            aCallback(null);
+            return;
+          }
+        }
+      }
+      // Iterate through the present states of all install locations from
+      // high priority to low priority. If an install location was already
+      // discovered before this method was called, we check if an add-on of the
+      // same ID existed there. If one did, it might shadow the new add-on.
+      // We also hide all add-ons of the same ID in lower priority locations.
+      let existingAddon;
+      let aState;
+      states = states.reverse();
+      for (let st of states) {
+        if (st.name === locationKey) {
+          aState = st;
+        }
+        else if (knownLocations.has(st.name)) {
+          let oldAddons = XPIDatabase.getAddonsInLocation(st.name);
+          for (let addon of oldAddons) {
+            if (addon.id === id) {
+              if (aState && addon.visible) {
+                // This is a lower priority location than the add-on's.
+                existingAddon = addon;
+              }
+              if (!aState && !shadowed) {
+                // This is higher priority location that the add-on's.
+                shadowed = true;
+              }
+            }
+          }
+        }
+      }
+      try {
+        restartLess = addMetaData(XPIProvider.installLocationsByName[locationKey],
+                                  id, shadowed, existingAddon, aState.addons[id]);
+      } catch (e) {
+        LOG("Error adding new add-on to database " + e);
+        aCallback(null);
+        return;
+      }
+      AddonManagerPrivate.recordSimpleMeasure("installedUnpacked", this.unpackedAddons);
+
+      states = this.getInstallLocationStates();
+      // Cache the new install location states
+      let cache = JSON.stringify(states);
+      Services.prefs.setCharPref(PREF_INSTALL_CACHE, cache);
+
+      // Perform the remaining database operations
+      LOG("Updating database with changes to installed add-on");
+      XPIDatabase.updateActiveAddons();
+      XPIDatabase.writeAddonsList();
+      Services.prefs.setBoolPref(PREF_PENDING_OPERATIONS, false);
+      Services.prefs.setCharPref(PREF_BOOTSTRAP_ADDONS,
+                                 JSON.stringify(this.bootstrappedAddons));
+    }
+    catch (e) {
+      ERROR("Error during file checks.", e);
+    }
+
+    // Check that the add-ons list still exists
+    let addonsList = FileUtils.getFile(KEY_PROFILEDIR, [FILE_XPI_ADDONS_LIST],
+                                       true);
+    if (addonsList.exists() == (states.length == 0)) {
+      LOG("Add-ons list is invalid, rebuilding");
+      XPIDatabase.writeAddonsList();
+    }
+    if (!restartLess) {
+      // If it is not a restart-less add-on send a startupcache-invalidate
+      // signal
+      flushStartupCache();
+    }
+
+    if (!shadowed) {
+      // The add-on can be passed to the callback only if it is visible.
+      // Otherwise we would be passing an add-on installed earlier.
+      AddonManager.getAddonByID(id, function (aAddon) {
+        if (aAddon && aAddon.userDisabled &&
+            (aAddon.permissions & AddonManager.PERM_CAN_ENABLE)) {
+          // Call the callback with the new add-on if all went well.
+          aCallback(aAddon);
+        }
+      });
+    } else {
+      aCallback(null);
+    }
+  },
+
+  /**
    * Removes an AddonInstall from the list of active installs.
    *
    * @param  install
    *         The AddonInstall to remove
    */
   removeActiveInstall: function XPI_removeActiveInstall(aInstall) {
     this.installs = this.installs.filter(function installFilter(i) i != aInstall);
   },
@@ -6561,30 +6844,94 @@
       }
 
       this._IDToFileMap[id] = entry;
       this._FileToIDMap[entry.path] = id;
     }
   },
 
   /**
+   * Checks if add-on of the passed file name exists in this location.
+   * If so, it adds it to its map.
+   *
+   * @param aFileName
+   *        The name of the file (or directory) corresponding to the add-on
+   * @return The id of the add-on if such a file actually exists.
+   */
+  lookUpAddon: function DirInstallLocation_lookUpAddon(aFileName) {
+    let entries = getDirectoryEntries(this.directory);
+    let id = aFileName;
+    if (id.substring(id.length - 4).toLowerCase() === ".xpi") {
+      id = id.substring(0, id.length - 4);
+    }
+    if (!gIDTest.test(id)) {
+      LOG("Ignoring add-on file whose name is not a valid add-on ID.");
+      return;
+    }
+    if (id in this._IDToFileMap) {
+      LOG("Add-on has already been read.");
+      return;
+    }
+    // Iterate through the entries under this directory and try to find the
+    // passed file name
+    for (let entry of entries) {
+      if (aFileName === entry.leafName) {
+        let directLoad = false;
+        if (entry.isFile() &&
+            entry.leafName.substring(entry.leafName.length - 4).toLowerCase() == ".xpi") {
+          directLoad = true;
+        }
+        if (entry.isFile() && !directLoad) {
+          let newEntry = this._readDirectoryFromFile(entry);
+          if (!newEntry && !this.locked) {
+            LOG("Deleting stale pointer file " + entry.path);
+            try {
+              entry.remove(true);
+            }
+            catch (e) {
+              WARN("Failed to remove stale pointer file " + entry.path, e);
+              // Failing to remove the stale pointer file is ignorable
+            }
+            return;
+          }
+
+          entry = newEntry;
+          this._linkedAddons.push(id);
+        }
+
+        this._IDToFileMap[id] = entry;
+        this._FileToIDMap[entry.path] = id;
+        return id;
+      }
+    }
+    LOG("No such add-on exists in " + this.directory.path + "\n");
+  },
+
+  /**
    * Gets the name of this install location.
    */
   get name() {
     return this._name;
   },
 
   /**
    * Gets the scope of this install location.
    */
   get scope() {
     return this._scope;
   },
 
   /**
+   * Gets the directory of this install location.
+   */
+  get directory() {
+    return this._directory;
+  },
+
+  /**
    * Gets an array of nsIFiles for add-ons installed in this location.
    */
   get addonLocations() {
     let locations = [];
     for (let id in this._IDToFileMap) {
       locations.push(this._IDToFileMap[id].clone());
     }
     return locations;
@@ -6898,16 +7245,83 @@
       }
 
       this._IDToFileMap[id] = file;
       this._FileToIDMap[file.path] = id;
     }
   },
 
   /**
+   * Checks if there is an entry corresponding to the add-on in here.
+   * If so, it adds it to its map.
+   *
+   * @param aFile
+   *        An nsIFile corresponding to the add-on
+   * @return The id of the add-on if such an add-on actually exists.
+   */
+  lookUpAddon: function RegInstallLocation_lookUpAddon(aFile) {
+    let id = aFile.leafName;
+    let res = null;
+    if (id.substring(id.length - 4).toLowerCase() === ".xpi") {
+      id = id.substring(0, id.length - 4);
+    }
+    if (!gIDTest.test(id)) {
+      LOG("Ignoring add-on file whose name is not a valid add-on ID.");
+      return;
+    }
+    if (id in this._IDToFileMap) {
+      LOG("Add-on has already been read.");
+      return;
+    }
+    let key = Cc["@mozilla.org/windows-registry-key;1"].
+              createInstance(Ci.nsIWindowsRegKey);
+    let regPath = this._appKeyPath + "\\Extensions";
+    // Reading the registry may throw an exception, and that's ok.  In error
+    // cases, we just leave ourselves in the empty state.
+    try {
+      key.open(this._rootKey, regPath, Ci.nsIWindowsRegKey.ACCESS_READ);
+    }
+    catch (e) {
+      return;
+    }
+    if (key && key.hasValue(id)) {
+      let path = key.readStringValue(id);
+      let file = Cc["@mozilla.org/file/local;1"].
+                 createInstance(Ci.nsILocalFile);
+      try {
+        file.initWithPath(path);
+      }
+      catch (e) {
+        if (e.result === NS_ERROR_FILE_UNRECOGNIZED_PATH) {
+          let roorStr = "";
+          switch (this._rootKey) {
+            case Ci.nsIWindowsRegKey.ROOT_KEY_CURRENT_USER:
+              roorStr = "HKEY_CURRENT_USER";
+              break;
+            case Ci.nsIWindowsRegKey.ROOT_KEY_LOCAL_MACHINE:
+              roorStr = "HKEY_LOCAL_MACHINE";
+              break;
+          }
+          ERROR("Wrong add-on path found in registry entry " + roorStr + "\\" +
+                regPath);
+        }
+      }
+      if (file && file.equals(aFile)) {
+        // The id will be returned
+        res = id;
+        // Add the add-on to the maps
+        this._IDToFileMap[id] = file;
+        this._FileToIDMap[file.path] = id;
+      }
+    }
+    key.close();
+    return res;
+  },
+
+  /**
    * Gets the name of this install location.
    */
   get name() {
     return this._name;
   },
 
   /**
    * Gets the scope of this install location.
diff --git a/toolkit/mozapps/extensions/content/extensions.xml b/toolkit/mozapps/extensions/content/extensions.xml
--- a/toolkit/mozapps/extensions/content/extensions.xml
+++ b/toolkit/mozapps/extensions/content/extensions.xml
@@ -1552,16 +1552,23 @@
       </method>
 
       <method name="onDisabled">
         <body><![CDATA[
           this._updateState();
         ]]></body>
       </method>
 
+      <method name="onInstalled">
+        <parameter name="aAddon"/>
+        <body><![CDATA[
+          this._initWithAddon(aAddon);
+        ]]></body>
+      </method>
+
       <method name="onUninstalling">
         <parameter name="aRestartRequired"/>
         <body><![CDATA[
           this._updateState();
         ]]></body>
       </method>
 
       <method name="onOperationCancelled">
